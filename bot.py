import logging
import os
import threading
from datetime import datetime, timedelta, timezone
from http.server import HTTPServer, BaseHTTPRequestHandler

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

import config
from database import Database
from price_checker import PriceChecker


class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'OK')
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, format, *args):
        # Suppress logs
        pass


def start_health_server():
    port = int(os.getenv('PORT', 8080))
    server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    logger.info(f"Health check server started on port {port}")


# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Hide noisy logs that contain token
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram.ext._application').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# Initialize components
db = Database()
price_checker = PriceChecker()
scheduler = AsyncIOScheduler()

# Store bot application globally for scheduler access
bot_app = None


def get_vn_time():
    """Get current Vietnam time (UTC+7)"""
    return datetime.now(timezone.utc) + timedelta(hours=7)


def is_trading_hours() -> bool:
    """Check if current time is within trading hours (9:00-11:30, 13:00-15:00 VN time)"""
    vn_time = get_vn_time()
    current_time = vn_time.time()

    # Check if weekend
    if vn_time.weekday() >= 5:
        return False

    # Morning session: 9:00 - 11:30
    morning_start = datetime.strptime("09:00", "%H:%M").time()
    morning_end = datetime.strptime("11:30", "%H:%M").time()

    # Afternoon session: 13:00 - 15:00
    afternoon_start = datetime.strptime("13:00", "%H:%M").time()
    afternoon_end = datetime.strptime("15:00", "%H:%M").time()

    # Check if in trading hours
    in_morning = morning_start <= current_time <= morning_end
    in_afternoon = afternoon_start <= current_time <= afternoon_end

    return in_morning or in_afternoon


def format_price(price: float) -> str:
    """Format price nicely - remove .0 for whole numbers"""
    if price == int(price):
        return f"{int(price):,}"
    else:
        return f"{price:,.1f}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send welcome message"""
    welcome_msg = """
ü§ñ *Ch√†o m·ª´ng ƒë·∫øn v·ªõi Stock Alert Bot!*

üìä Bot gi√∫p b·∫°n theo d√µi gi√° c·ªï phi·∫øu v√† nh·∫≠n th√¥ng b√°o khi ƒë·∫°t ng∆∞·ª°ng mong mu·ªën.

*C√°c l·ªánh c√≥ s·∫µn:*
/alert <M√É> <GI√Å> - ƒê·∫∑t c·∫£nh b√°o (VD: /alert HPG 25500)
/list - Xem danh s√°ch c·∫£nh b√°o
/edit <M√É> <GI√Å> - S·ª≠a gi√° alert (VD: /edit HPG 26500)
/remove <M√É> - X√≥a alert theo m√£
/clear - X√≥a t·∫•t c·∫£ alerts
/price <M√É> - Ki·ªÉm tra gi√° hi·ªán t·∫°i# Check status
/guide - Xem h∆∞·ªõng d·∫´n
/help - Tr·ª£ gi√∫p

*L∆∞u √Ω:*
‚Ä¢ Bot ki·ªÉm tra gi√° m·ªói 10 gi√¢y
‚Ä¢ C·∫£nh b√°o t·ª± ƒë·ªông x√≥a sau khi k√≠ch ho·∫°t

B·∫Øt ƒë·∫ßu b·∫±ng c√°ch g√µ: /alert HPG 25500
    """
    await update.message.reply_text(welcome_msg, parse_mode='Markdown')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show command list"""
    help_msg = """
üìã *Danh s√°ch l·ªánh:*

/alert <M√É> <GI√Å> - ƒê·∫∑t c·∫£nh b√°o
/list - Xem danh s√°ch alerts
/edit <M√É> <GI√Å> - S·ª≠a gi√° alert
/remove <M√É> - X√≥a alert
/clear - X√≥a t·∫•t c·∫£
/price <M√É> - Ki·ªÉm tra gi√°
/guide - H∆∞·ªõng d·∫´n chi ti·∫øt

*V√≠ d·ª•:*
`/alert HPG 26500`
`/price HPG`
`/edit HPG 27000`
    """
    await update.message.reply_text(help_msg, parse_mode='Markdown')


async def guide_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed guide"""
    guide_msg = """
üìñ *H∆∞·ªõng d·∫´n chi ti·∫øt:*

*1Ô∏è‚É£ ƒê·∫∑t c·∫£nh b√°o:*
`/alert HPG 25500`
‚Üí Nh·∫≠n th√¥ng b√°o khi HPG ƒë·∫°t ‚â• 25,500 VNƒê

*2Ô∏è‚É£ Xem danh s√°ch:*
`/list`
‚Üí Hi·ªÉn th·ªã t·∫•t c·∫£ c·∫£nh b√°o v·ªõi gi√° hi·ªán t·∫°i

*3Ô∏è‚É£ S·ª≠a gi√° alert:*
`/edit HPG 26500`
‚Üí S·ª≠a alert HPG th√†nh gi√° m·ªõi 26,500 VNƒê

*4Ô∏è‚É£ X√≥a alert:*
`/remove HPG` - X√≥a alert c·ªßa m√£ HPG
`/clear` - X√≥a t·∫•t c·∫£ alerts

*5Ô∏è‚É£ Ki·ªÉm tra gi√°:*
`/price HPG`
‚Üí Xem gi√° hi·ªán t·∫°i c·ªßa HPG

*L∆∞u √Ω:*
‚Ä¢ M·ªói m√£ ch·ªâ c√≥ 1 alert
‚Ä¢ Alert t·ª± ƒë·ªông x√≥a sau khi k√≠ch ho·∫°t
‚Ä¢ Gi√° hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß VNƒê

*V√≠ d·ª• th·ª±c t·∫ø:*
‚Ä¢ `/alert VNM 80000` - B√°o khi VNM ‚â• 80,000 VNƒê
‚Ä¢ `/list` - Xem alerts
‚Ä¢ `/edit VNM 81000` - S·ª≠a th√†nh 81,000 VNƒê
‚Ä¢ `/remove VNM` - X√≥a alert VNM
‚Ä¢ `/clear` - X√≥a h·∫øt
    """
    await update.message.reply_text(guide_msg, parse_mode='Markdown')


async def alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /alert command - supports both single and multiple alerts"""
    # Safety check
    if not update.message:
        return

    chat_id = update.effective_chat.id

    # Check command format
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå Sai c√∫ ph√°p!\n\n"
            "*C√°ch 1 (ƒë∆°n):*\n"
            "`/alert HPG 25500`\n\n"
            "*C√°ch 2 (nhi·ªÅu):*\n"
            "`/alert HPG 25500 VNM 80000 FPT 120000`\n\n"
            "Format: `<M√É> <GI√Å>` (c·∫∑p m√£-gi√°, c√°ch nhau b·∫±ng space)",
            parse_mode='Markdown'
        )
        return

    # Check if args count is even (must be pairs of symbol-price)
    if len(context.args) % 2 != 0:
        await update.message.reply_text(
            "‚ùå S·ªë l∆∞·ª£ng tham s·ªë kh√¥ng h·ª£p l·ªá!\n\n"
            "M·ªói alert c·∫ßn 1 c·∫∑p: `<M√É> <GI√Å>`\n\n"
            "V√≠ d·ª•:\n"
            "`/alert HPG 25500` (1 alert)\n"
            "`/alert HPG 25500 VNM 80000` (2 alerts)",
            parse_mode='Markdown'
        )
        return

    # Parse all symbol-price pairs
    alerts_to_add = []
    invalid_prices = []

    for i in range(0, len(context.args), 2):
        symbol = context.args[i].upper()
        try:
            target_price = float(context.args[i + 1])

            if target_price <= 0:
                invalid_prices.append(f"{symbol} {context.args[i + 1]} (gi√° ph·∫£i > 0)")
                continue

            alerts_to_add.append((symbol, target_price))

        except ValueError:
            invalid_prices.append(f"{symbol} {context.args[i + 1]} (gi√° kh√¥ng h·ª£p l·ªá)")

    if invalid_prices:
        await update.message.reply_text(
            f"‚ö†Ô∏è *Gi√° kh√¥ng h·ª£p l·ªá:*\n"
            f"{chr(10).join('‚Ä¢ ' + item for item in invalid_prices)}\n\n"
            f"Gi√° ph·∫£i l√† s·ªë > 0",
            parse_mode='Markdown'
        )
        return

    if not alerts_to_add:
        await update.message.reply_text("‚ùå Kh√¥ng c√≥ alert h·ª£p l·ªá n√†o ƒë·ªÉ th√™m!")
        return

    # Single alert - quick path (no progress message)
    if len(alerts_to_add) == 1:
        symbol, target_price = alerts_to_add[0]

        # Validate symbol
        await update.message.reply_text(f"‚è≥ ƒêang ki·ªÉm tra m√£ {symbol}...")
        is_valid = await price_checker.validate_symbol(symbol)

        if not is_valid:
            await update.message.reply_text(
                f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ {symbol}!\n"
                "Vui l√≤ng ki·ªÉm tra l·∫°i m√£ c·ªï phi·∫øu."
            )
            return

        # Get current price
        current_price = await price_checker.get_price(symbol)

        # Check if alert already exists
        if db.alert_exists(chat_id, symbol):
            await update.message.reply_text(
                f"‚ö†Ô∏è *C·∫£nh b√°o ƒë√£ t·ªìn t·∫°i!*\n\n"
                f"B·∫°n ƒë√£ c√≥ alert cho *{symbol}*\n\n"
                f"D√πng `/edit {symbol} <GI√Å>` ƒë·ªÉ s·ª≠a ho·∫∑c `/remove {symbol}` ƒë·ªÉ x√≥a",
                parse_mode='Markdown'
            )
            return

        # Add alert to database
        if db.add_alert(chat_id, symbol, target_price):
            msg = (
                f"‚úÖ *ƒê√£ ƒë·∫∑t c·∫£nh b√°o!*\n\n"
                f"üìä M√£: *{symbol}*\n"
                f"üéØ Gi√° m·ª•c ti√™u: *{format_price(target_price)}* VNƒê\n"
                f"üí∞ Gi√° hi·ªán t·∫°i: *{format_price(current_price)}* VNƒê\n\n"
                f"Bot s·∫Ω th√¥ng b√°o khi {symbol} ƒë·∫°t ‚â• {format_price(target_price)}"
            )
            await update.message.reply_text(msg, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå L·ªói khi ƒë·∫∑t c·∫£nh b√°o. Vui l√≤ng th·ª≠ l·∫°i!")

        return

    # Multiple alerts - show progress
    progress_msg = await update.message.reply_text(
        f"‚è≥ ƒêang x·ª≠ l√Ω {len(alerts_to_add)} alerts..."
    )

    # Validate all symbols first (batch)
    symbols_to_validate = [symbol for symbol, _ in alerts_to_add]
    await progress_msg.edit_text(
        f"‚è≥ ƒêang ki·ªÉm tra {len(symbols_to_validate)} m√£ c·ªï phi·∫øu..."
    )

    # Fetch prices for all symbols in parallel
    prices = await price_checker.get_multiple_prices(symbols_to_validate)

    # Process results
    added = []
    skipped = []
    invalid = []

    for symbol, target_price in alerts_to_add:
        # Check if symbol is valid
        if symbol not in prices:
            invalid.append(f"{symbol} (kh√¥ng t√¨m th·∫•y)")
            continue

        # Check if alert already exists
        if db.alert_exists(chat_id, symbol):
            skipped.append(f"{symbol} (ƒë√£ t·ªìn t·∫°i)")
            continue

        # Add alert
        if db.add_alert(chat_id, symbol, target_price):
            current_price = prices[symbol]
            added.append((symbol, target_price, current_price))
        else:
            skipped.append(f"{symbol} (l·ªói database)")

    # Build result message
    result_msg = "üìä *K·∫æT QU·∫¢ TH√äM ALERTS:*\n\n"

    if added:
        result_msg += f"‚úÖ *ƒê√£ th√™m {len(added)} alerts:*\n"
        for symbol, target, current in added:
            distance = target - current
            result_msg += f"‚Ä¢ {symbol}: {format_price(target)} VNƒê "
            result_msg += f"(hi·ªán t·∫°i: {format_price(current)}, "
            if distance > 0:
                result_msg += f"c√≤n {format_price(distance)})\n"
            else:
                result_msg += f"ƒë√£ ƒë·∫°t!)\n"
        result_msg += "\n"

    if invalid:
        result_msg += f"‚ùå *M√£ kh√¥ng h·ª£p l·ªá ({len(invalid)}):*\n"
        for item in invalid:
            result_msg += f"‚Ä¢ {item}\n"
        result_msg += "\n"

    if skipped:
        result_msg += f"‚ö†Ô∏è *B·ªè qua ({len(skipped)}):*\n"
        for item in skipped:
            result_msg += f"‚Ä¢ {item}\n"
        result_msg += "\n"

    result_msg += f"_T·ªïng: {len(added)} th√†nh c√¥ng, {len(invalid)} l·ªói, {len(skipped)} b·ªè qua_"

    await progress_msg.edit_text(result_msg, parse_mode='Markdown')


async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all alerts for user"""
    if not update.message:
        return

    chat_id = update.effective_chat.id
    alerts = db.get_user_alerts(chat_id)

    if not alerts:
        await update.message.reply_text(
            "üì≠ B·∫°n ch∆∞a c√≥ c·∫£nh b√°o n√†o!\n\n"
            "ƒê·∫∑t c·∫£nh b√°o b·∫±ng: /alert HPG 25500"
        )
        return

    msg = "üìã *Danh s√°ch c·∫£nh b√°o:*\n\n"

    for alert_id, symbol, target_price in alerts:
        current_price = await price_checker.get_price(symbol)

        # Calculate distance to target
        if current_price:
            distance = target_price - current_price
            distance_pct = (distance / current_price * 100) if current_price else 0

            if distance > 0:
                status = f"üìà C√≤n {format_price(distance)} ({distance_pct:.1f}%)"
            else:
                status = f"‚úÖ ƒê√£ ƒë·∫°t!"

            msg += f"*ID {alert_id}:* {symbol}\n"
            msg += f"  üéØ Target: {format_price(target_price)}\n"
            msg += f"  üí∞ Hi·ªán t·∫°i: {format_price(current_price)}\n"
            msg += f"  {status}\n\n"
        else:
            msg += f"*ID {alert_id}:* {symbol}\n"
            msg += f"  üéØ Target: {format_price(target_price)}\n"
            msg += f"  üí∞ Hi·ªán t·∫°i: N/A\n\n"

    msg += f"_T·ªïng: {len(alerts)} c·∫£nh b√°o_\n\n"
    msg += "üí° *Thao t√°c:*\n"
    msg += "`/edit <M√É> <GI√Å>` - S·ª≠a\n"
    msg += "`/remove <M√É>` - X√≥a alert\n"
    msg += "`/clear` - X√≥a t·∫•t c·∫£"

    await update.message.reply_text(msg, parse_mode='Markdown')


async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove alerts - supports both single and multiple symbols"""
    if not update.message:
        return

    chat_id = update.effective_chat.id

    if len(context.args) < 1:
        await update.message.reply_text(
            "‚ùå Sai c√∫ ph√°p!\n\n"
            "*C√°ch 1 (ƒë∆°n):*\n"
            "`/remove HPG`\n\n"
            "*C√°ch 2 (nhi·ªÅu):*\n"
            "`/remove HPG VNM FPT`\n\n"
            "Li·ªát k√™ c√°c m√£ c·∫ßn x√≥a, c√°ch nhau b·∫±ng space",
            parse_mode='Markdown'
        )
        return

    # Parse symbols
    symbols = [arg.upper() for arg in context.args]

    # Remove duplicates while preserving order
    symbols = list(dict.fromkeys(symbols))

    # Single symbol - quick path
    if len(symbols) == 1:
        symbol = symbols[0]
        count = db.remove_alerts_by_symbol(chat_id, symbol)

        if count > 0:
            await update.message.reply_text(
                f"‚úÖ ƒê√£ x√≥a c·∫£nh b√°o cho m√£ *{symbol}*",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå Kh√¥ng t√¨m th·∫•y c·∫£nh b√°o n√†o cho m√£ *{symbol}*",
                parse_mode='Markdown'
            )
        return

    # Multiple symbols - show results
    removed = []
    not_found = []

    for symbol in symbols:
        count = db.remove_alerts_by_symbol(chat_id, symbol)
        if count > 0:
            removed.append((symbol, count))
        else:
            not_found.append(symbol)

    # Build result message
    result_msg = "üóëÔ∏è *K·∫æT QU·∫¢ X√ìA ALERTS:*\n\n"

    if removed:
        result_msg += f"‚úÖ *ƒê√£ x√≥a alerts cho {len(removed)} m√£:*\n"
        for symbol, count in removed:
            result_msg += f"‚Ä¢ {symbol} ({count} alert{'s' if count > 1 else ''})\n"
        result_msg += "\n"

    if not_found:
        result_msg += f"‚ùå *Kh√¥ng t√¨m th·∫•y alerts ({len(not_found)}):*\n"
        for symbol in not_found:
            result_msg += f"‚Ä¢ {symbol}\n"
        result_msg += "\n"

    total_removed = sum(count for _, count in removed)
    result_msg += f"_T·ªïng: ƒê√£ x√≥a {total_removed} alerts_"

    await update.message.reply_text(result_msg, parse_mode='Markdown')


async def edit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Edit alert price"""
    if not update.message:
        return

    chat_id = update.effective_chat.id

    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå Sai c√∫ ph√°p!\n\n"
            "ƒê√∫ng: /edit <M√É> <GI√Å_M·ªöI>\n"
            "V√≠ d·ª•: /edit HPG 26.5"
        )
        return

    symbol = context.args[0].upper()

    try:
        new_price = float(context.args[1])
    except ValueError:
        await update.message.reply_text(
            "‚ùå Gi√° kh√¥ng h·ª£p l·ªá!\n"
            "Gi√° ph·∫£i l√† s·ªë"
        )
        return

    if new_price <= 0:
        await update.message.reply_text("‚ùå Gi√° ph·∫£i l·ªõn h∆°n 0!")
        return

    # Check if user has alert for this symbol
    if not db.alert_exists(chat_id, symbol):
        await update.message.reply_text(
            f"‚ùå B·∫°n ch∆∞a c√≥ alert cho m√£ *{symbol}*\n\n"
            f"D√πng /alert {symbol} {int(new_price)} ƒë·ªÉ t·∫°o m·ªõi",
            parse_mode='Markdown'
        )
        return

    # Update alert
    if db.update_alert_by_symbol(chat_id, symbol, new_price):
        current_price = await price_checker.get_price(symbol)

        msg = (
            f"‚úÖ *ƒê√£ c·∫≠p nh·∫≠t alert!*\n\n"
            f"üìä M√£: *{symbol}*\n"
            f"üéØ Gi√° m·ªõi: *{format_price(new_price)}* VNƒê\n"
        )

        if current_price:
            msg += f"üí∞ Gi√° hi·ªán t·∫°i: *{format_price(current_price)}* VNƒê\n"

            await update.message.reply_text(msg, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå L·ªói khi c·∫≠p nh·∫≠t alert!")


async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Clear all alerts for user"""
    if not update.message:
        return

    chat_id = update.effective_chat.id
    count = db.clear_user_alerts(chat_id)

    if count > 0:
        await update.message.reply_text(
            f"‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ {count} c·∫£nh b√°o!"
        )
    else:
        await update.message.reply_text(
            "üì≠ B·∫°n ch∆∞a c√≥ c·∫£nh b√°o n√†o ƒë·ªÉ x√≥a!"
        )


async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check current price of a stock"""
    if not update.message:
        return

    if len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå Sai c√∫ ph√°p!\n\n"
            "ƒê√∫ng: /price <M√É>\n"
            "V√≠ d·ª•: /price HPG"
        )
        return

    symbol = context.args[0].upper()
    await update.message.reply_text(f"‚è≥ ƒêang l·∫•y gi√° {symbol}...")

    info = await price_checker.get_stock_info(symbol)

    if info:
        change_emoji = "üü¢" if info['change'] > 0 else "üî¥" if info['change'] < 0 else "‚ö™"
        msg = (
            f"{change_emoji} *{info['symbol']}*\n\n"
            f"üí∞ Gi√°: *{format_price(info['price'])}* VNƒê\n"
            f"üìà Thay ƒë·ªïi: {info['change']:+,.0f} ({info['change_percent']:+.2f}%)\n"
            f"üìä Cao: {format_price(info['high'])} | Th·∫•p: {format_price(info['low'])}\n"
            f"üì¶ KL: {info['volume']:,.0f}\n"
        )
        await update.message.reply_text(msg, parse_mode='Markdown')
    else:
        await update.message.reply_text(
            f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho m√£ *{symbol}*",
            parse_mode='Markdown'
        )


async def check_alerts():
    """Background task to check all alerts"""

    if not is_trading_hours():
        logger.debug("Outside trading hours, skipping price check")
        return

    alerts = db.get_all_alerts()

    if not alerts:
        logger.debug("No alerts to check")
        return

    logger.info(f"‚è∞ Checking {len(alerts)} alerts...")

    # Step1: Group alerts by symbol to avoid duplicate price fetches
    # Example: If 5 users have HPG alerts, we only fetch HPG price once
    alerts_by_symbol = {}
    for alert_id, chat_id, symbol, target_price in alerts:
        if symbol not in alerts_by_symbol:
            alerts_by_symbol[symbol] = []
        alerts_by_symbol[symbol].append((alert_id, chat_id, target_price))

    # Step 2: Get unique symbols and fetch ALL prices in ONE batch
    unique_symbols = list(alerts_by_symbol.keys())
    logger.info(f"üìä Fetching prices for {len(unique_symbols)} unique symbols...")

    # üî• THIS IS THE MAGIC - Parallel batch API call
    prices = await price_checker.get_multiple_prices(unique_symbols)

    # Step 3: Check each alert against fetched prices
    notifications_sent = 0
    for symbol, alerts_list in alerts_by_symbol.items():
        current_price = prices.get(symbol)

        if current_price is None:
            logger.warning(f"‚ùå No price data for {symbol}, skipping alerts")
            continue

        # Check all alerts for this symbol
        for alert_id, chat_id, target_price in alerts_list:
            try:
                # Check if price reached target
                if current_price >= target_price:
                    # Send notification
                    msg = (
                        f"üéØ *C·∫¢NH B√ÅO GI√Å!*\n\n"
                        f"üìä *{symbol}* ƒë√£ ƒë·∫°t m·ª•c ti√™u!\n\n"
                        f"üéØ Gi√° m·ª•c ti√™u: *{format_price(target_price)}* VNƒê\n"
                        f"üí∞ Gi√° hi·ªán t·∫°i: *{format_price(current_price)}* VNƒê\n\n"
                        f"_C·∫£nh b√°o ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a_"
                    )

                    try:
                        await bot_app.bot.send_message(
                            chat_id=chat_id,
                            text=msg,
                            parse_mode='Markdown'
                        )
                        notifications_sent += 1
                        logger.info(f"‚úÖ Alert triggered: {symbol} @ {target_price} for chat {chat_id}")
                    except Exception as e:
                        logger.error(f"Error sending notification: {e}")

                    # Remove alert after notification
                    db.remove_alerts_by_symbol(chat_id, symbol)

            except Exception as e:
                logger.error(f"Error checking alert {alert_id}: {e}")

    logger.info(f"‚úÖ Check complete. {notifications_sent} notifications sent")


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle unknown commands"""
    if not update.message:
        return

    await update.message.reply_text(
        "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá!\n\n"
        "G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh."
    )


def main():
    """Start the bot"""
    global bot_app

    # Create application
    bot_app = Application.builder().token(config.BOT_TOKEN).build()

    # Add command handlers
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("help", help_command))
    bot_app.add_handler(CommandHandler("guide", guide_command))
    bot_app.add_handler(CommandHandler("alert", alert_command))
    bot_app.add_handler(CommandHandler("list", list_command))
    bot_app.add_handler(CommandHandler("remove", remove_command))
    bot_app.add_handler(CommandHandler("edit", edit_command))
    bot_app.add_handler(CommandHandler("clear", clear_command))
    bot_app.add_handler(CommandHandler("price", price_command))

    # Set bot commands menu (shows when user types /)
    async def post_init(application: Application) -> None:
        """Set bot commands after initialization"""
        await application.bot.set_my_commands([
            ("alert", "ƒê·∫∑t c·∫£nh b√°o gi√°"),
            ("list", "Xem danh s√°ch alerts"),
            ("edit", "S·ª≠a gi√° alert"),
            ("remove", "X√≥a alert"),
            ("clear", "X√≥a t·∫•t c·∫£"),
            ("price", "Ki·ªÉm tra gi√° hi·ªán t·∫°i"),
            ("help", "Danh s√°ch l·ªánh"),
            ("guide", "H∆∞·ªõng d·∫´n chi ti·∫øt"),
        ])

        # Start scheduler in async context
        if not scheduler.running:
            scheduler.start()  # ‚Üê MOVE v√†o ƒë√¢y!
            logger.info(f"Scheduler started - checking prices every {config.CHECK_INTERVAL} seconds")

    bot_app.post_init = post_init

    # Schedule price checking job (but don't start scheduler yet)
    scheduler.add_job(
        check_alerts,  # ‚Üê Function th·∫≠t
        'interval',
        seconds=config.CHECK_INTERVAL,
        id='check_alerts'
    )
    # ‚Üê X√ìA scheduler.start() ·ªü ƒë√¢y!

    logger.info("Bot started successfully!")

    # Start health check server
    start_health_server()

    # Start bot
    bot_app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
